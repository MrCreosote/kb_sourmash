# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_sourmash(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_sourmash(self, params, context=None):
        """
        :param params: instance of type "SourmashParams" -> structure:
           parameter "input_assembly_upa" of String, parameter
           "workspace_name" of String, parameter "search_db" of String,
           parameter "scaled" of Long
        :returns: instance of type "SourmashResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_sourmash.run_sourmash',
            [params], self._service_ver, context)

    def run_sourmash_compare(self, params, context=None):
        """
        :param params: instance of type "SourmashCompareParams" -> structure:
           parameter "object_list" of list of type "obj_upa" (An X/Y/Z style
           workspace object reference), parameter "workspace_name" of String,
           parameter "scaled" of Long
        :returns: instance of type "SourmashResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_sourmash.run_sourmash_compare',
            [params], self._service_ver, context)

    def run_sourmash_search(self, params, context=None):
        """
        :param params: instance of type "SourmashSearchParams" -> structure:
           parameter "input_assembly_upa" of type "obj_upa" (An X/Y/Z style
           workspace object reference), parameter "workspace_name" of String,
           parameter "search_db" of String, parameter "scaled" of Long,
           parameter "containment" of type "boolean" (A boolean - 0 for
           false, 1 for true. @range (0, 1))
        :returns: instance of type "SourmashResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_sourmash.run_sourmash_search',
            [params], self._service_ver, context)

    def run_sourmash_gather(self, params, context=None):
        """
        :param params: instance of type "SourmashGatherParams" -> structure:
           parameter "input_assembly_upa" of type "obj_upa" (An X/Y/Z style
           workspace object reference), parameter "workspace_name" of String,
           parameter "search_db" of String, parameter "scaled" of Long
        :returns: instance of type "SourmashResults" -> structure: parameter
           "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_sourmash.run_sourmash_gather',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_sourmash.status',
                                        [], self._service_ver, context)
